import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog
from PIL import Image, ImageTk
import openpyxl
from datetime import datetime
import os

class PixelExtractor:
    def __init__(self, root):
        self.root = root
        self.root.title("Pixel Extractor")
        self.root.geometry("1850x950")  # Change the size to 1850x950

        self.image_folder_path = ""
        self.image_list = []
        self.current_image_index = 0
        self.click_count = 0  # To track the number of clicks on the current image

        # Frame for the entire window
        self.window_frame = tk.Frame(root, width=1850, height=950)
        self.window_frame.pack(fill="both", expand=True)

        # Frame for image display
        self.image_frame = tk.Frame(self.window_frame, width=1600, height=900)
        self.image_frame.pack(side="left", fill="both", expand=True)

        # Canvas for image
        self.canvas = tk.Canvas(self.image_frame, width=1600, height=900)
        self.canvas.pack(side="top", fill="both", expand=True)

        # Scrollbars for the canvas
        self.scrollbar_y = tk.Scrollbar(self.image_frame, orient="vertical", command=self.canvas.yview)
        self.scrollbar_y.pack(side="right", fill="y")
        self.scrollbar_x = tk.Scrollbar(self.image_frame, orient="horizontal", command=self.canvas.xview)
        self.scrollbar_x.pack(side="bottom", fill="x")
        self.canvas.configure(xscrollcommand=self.scrollbar_x.set, yscrollcommand=self.scrollbar_y.set)
        self.canvas.bind("<Configure>", self.on_canvas_configure)
        self.canvas.bind("<Button-1>", self.on_click)

        # Frame for information display (on the right)
        self.info_frame = tk.Frame(self.window_frame, width=250, height=900, bg="lightgray")
        self.info_frame.pack(side="right", fill="both", expand=False)

        # Label for displaying information
        self.info_label = tk.Label(self.info_frame, text="", justify="left", bg="lightgray", padx=5, pady=5)
        self.info_label.pack(side="top", fill="both", expand=False)

        self.tk_image = None  # Added tk_image as an instance variable
        self.click_coords = []

        self.load_images()

    def load_images(self):
        # Ask user to select a folder
        self.image_folder_path = filedialog.askdirectory(title="Select Image Folder")
        if not self.image_folder_path:
            self.root.destroy()
            return

        # Get a list of all jpg files in the selected folder
        self.image_list = [file for file in os.listdir(self.image_folder_path) if file.lower().endswith(".jpg")]

        if not self.image_list:
            messagebox.showinfo("Error", "No jpg files found in the selected folder.")
            self.root.destroy()
            return

        # Load the first image
        self.load_image()

    def load_image(self):
        if self.current_image_index < len(self.image_list):
            image_path = os.path.join(self.image_folder_path, self.image_list[self.current_image_index])
            self.original_image = Image.open(image_path)

            # Display the image in its original size
            self.tk_image = ImageTk.PhotoImage(self.original_image)
            self.image_item = self.canvas.create_image(0, 0, anchor=tk.NW, image=self.tk_image)

            # Set the canvas scrolling region to the canvas size
            self.canvas.config(scrollregion=(0, 0, self.original_image.width, self.original_image.height))

            # Prepare Excel file
            if os.path.exists("image.xlsx"):
                self.workbook = openpyxl.load_workbook("image.xlsx")
            else:
                self.workbook = openpyxl.Workbook()
                self.workbook.save("image.xlsx")

            self.sheet = self.workbook.active

            self.show_position(f"Click on image {self.current_image_index + 1}, point {self.click_count + 1}")

    def on_click(self, event):
        if self.current_image_index >= len(self.image_list):
            # All images processed, close the application
            self.workbook.save("image.xlsx")
            self.root.destroy()
            return

        x, y = self.canvas.canvasx(event.x), self.canvas.canvasy(event.y)

        if self.click_count == 0:
            # Open a dialog to get additional x, y values from the user
            user_x = simpledialog.askfloat("X Coordinate", f"Enter X coordinate for point {self.click_count + 1}",
                                           parent=self.image_frame)
            user_y = simpledialog.askfloat("Y Coordinate", f"Enter Y coordinate for point {self.click_count + 1}",
                                           parent=self.image_frame)
            # Save the data to Excel for the first point
            image_filename = self.image_list[self.current_image_index]
            self.save_to_excel(image_filename, (user_x, user_y, x, y))
            self.click_coords.append((user_x, user_y, x, y))
            self.click_count += 1
        elif self.click_count == 1:
            # For the second point, ask for x and y
            user_x = simpledialog.askfloat("X Coordinate", f"Enter X coordinate for point {self.click_count + 1}",
                                           parent=self.image_frame)
            user_y = simpledialog.askfloat("Y Coordinate", f"Enter Y coordinate for point {self.click_count + 1}",
                                           parent=self.image_frame)
            if user_x is not None and user_y is not None:
                # Save the data to Excel for the second point
                image_filename = self.image_list[self.current_image_index]
                self.save_to_excel(image_filename, (user_x, user_y, x, y))
                self.click_coords.append((user_x, user_y, x, y))
                self.click_count += 1
                # Save additional data to Excel for the second point
                self.save_additional_data_to_excel(image_filename, (self.click_coords[0][0], user_y,
                                                                     self.click_coords[0][2], self.click_coords[1][3]))
            else:
                messagebox.showinfo("Error", "Invalid coordinates. Please try again.")

        # Display information in the right frame
        info_text = f"Image: {self.current_image_index + 1}\nPoint: {self.click_count}\nCoordinates: ({x}, {y})"
        self.info_label.config(text=info_text)

        # Move the vertical scrollbar to the right
        if self.scrollbar_y.get()[1] < 1:
            self.scrollbar_y.set(self.scrollbar_y.get()[0], self.scrollbar_y.get()[1] + 0.01)

        # If two points are clicked, move to the next image
        if self.click_count == 2:
            self.click_count = 0
            self.current_image_index += 1
            self.click_coords = []  # Clear click coordinates
            self.canvas.delete("all")  # Clear canvas

            if self.current_image_index < len(self.image_list):
                self.load_image()
            else:
                # All images processed, close the application
                self.workbook.save("image.xlsx")
                self.root.destroy()
        else:
            # Display instructions for the second point
            self.show_position(f"Click on image {self.current_image_index + 1}, point {self.click_count + 1}")

    def save_to_excel(self, image_filename, position):
        clicked_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.sheet.append([image_filename, *position, clicked_time])
        self.workbook.save("image.xlsx")  # Save after each click

    def save_additional_data_to_excel(self, image_filename, position):
        # Save additional data to Excel for the second point
        clicked_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.sheet.append([image_filename, *position, clicked_time])
        self.workbook.save("image.xlsx")  # Save after each click

    def on_canvas_configure(self, event):
        # Adjust the canvas scrolling region when the window is resized
        if self.tk_image:
            self.canvas.config(scrollregion=(0, 0, self.original_image.width, self.original_image.height))
            self.scrollbar_y.place(x=self.image_frame.winfo_width() - 20, y=0, relheight=1)  # Adjusted position

    def show_position(self, text):
        self.info_label.config(text=text)

if __name__ == "__main__":
    root = tk.Tk()
    app = PixelExtractor(root)
    root.mainloop()
